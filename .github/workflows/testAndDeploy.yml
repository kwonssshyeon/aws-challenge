name: testAndDeploy
on:
    push:
        branches:
            - master

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: express
  ECR_SERVICE: express-service
  ECR_CLUSTER: my-express-cluster
  ECR_TASK_DEFINITION: ./task_definition.json
  CONTAINER_NAME: express

permissions:
  id-token: write
  contents: read


jobs:
    test:
        runs-on: ubuntu-22.04
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            - name: Build and test with Docker Compose
              run: docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
    
    deploy:
      runs-on: ubuntu-latest
      needs: test
      steps:
      
        - name: Checkout
          uses: actions/checkout@v4
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: arn:aws:iam::517046313111:role/githun_kwonssshyeon_OIDC
            role-session-name: sampleSessionName
            aws-region: ${{ env.AWS_REGION }}
  
  
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
  
        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
          run: |
            # Build a docker container and
            # push it to ECR so that it can
            # be deployed to ECS.
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
          with:
            task-definition: ${{ env.ECS_TASK_DEFINITION }}
            container-name: ${{ env.CONTAINER_NAME }}
            image: ${{ steps.build-image.outputs.image }}
  
        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE }}
            cluster: ${{ env.ECS_CLUSTER }}
            wait-for-service-stability: true